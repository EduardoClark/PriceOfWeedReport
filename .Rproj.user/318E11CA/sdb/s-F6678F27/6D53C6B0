{
    "contents" : "##################################\n## Author:Eduardo Clark\n## Proyect: Price of Weed Report\n## Date: June, 2013\n##################################\n\n####Price Index\n#State Use\nMJIncidence <- read.csv(\"http://www.samhsa.gov/data/NSDUH/2k11State/NSDUHsaeExcelTab2-2011.csv\", header=TRUE) ### Read NSDUH State Prevalence Estimates\nMJIncidence$Table.2..Marijuana.Use.in.the.Past.Year..by.Age.Group.and.State..Percentages..Annual.Averages.Based.on.2010.and.2011.NSDUHs.. <- NULL\nMJIncidence <- subset(MJIncidence, MJIncidence$X != (unique(MJIncidence$X)[1]))\nMJIncidence <- subset(MJIncidence, select=1:2)\ncolnames(MJIncidence) <- c(\"State\", \"UserPer\")\nMJIncidence$State <- as.character(MJIncidence$State)\n\n#State Population (From wikipedia)\nStatePopulation <- ldply(readHTMLTable(\"http://en.wikipedia.org/wiki/List_of_U.S._states_and_territories_by_population\")[5])\nStatePopulation <- subset(StatePopulation, select=c(4,5,13))\ncolnames(StatePopulation) <- c(\"State\", \"Population\", \"PercentagePopulation\")\nStatePopulation$Population <- gsub(\",\", \"\", StatePopulation$Population)\nStatePopulation$Population <- as.numeric(StatePopulation$Population)\nStatePopulation$State <- as.character(StatePopulation$State)\nStatePopulation$State <- substring(StatePopulation$State, 2, 1000)\n\nStatePopulation <- merge(MJIncidence, StatePopulation, by=\"State\", all.x=TRUE, all.y=FALSE)\nStatePopulation <- subset(StatePopulation, is.na(StatePopulation$Population )==FALSE)\nStatePopulation$UserPer <- gsub(\"%\", \"\", StatePopulation$UserPer)\nStatePopulation$PercentagePopulation <- gsub(\"%\", \"\", StatePopulation$PercentagePopulation)\nStatePopulation$UserPer <- as.numeric(StatePopulation$UserPer)\nStatePopulation$PercentagePopulation <- as.numeric(StatePopulation$PercentagePopulation)\nStatePopulation$Weight <- StatePopulation$UserPer * StatePopulation$PercentagePopulation\nStatePopulation$Weight <- StatePopulation$Weight / sum(StatePopulation$Weight)\nremove(MJIncidence)\n\n#Compute Weighted Averages\nPriceTimeSeries$State <- substring(PriceTimeSeries$State, 2) ##Trim Leading Zero\nPriceTimeSeries <- merge(PriceTimeSeries, StatePopulation, by=\"State\", all.x=TRUE, all.y=FALSE)\nremove(StatePopulation)\nIndex <- weighted.mean(unlist(PriceTimeSeries[2]), PriceTimeSeries$Weight, na.rm=TRUE)\nfor (i in 3:34){ ###Create Price Index Time Series\n  tmp <- weighted.mean(unlist(PriceTimeSeries[i]), PriceTimeSeries$Weight, na.rm=TRUE)\n  Index <- c(Index, tmp)\n  remove(tmp)\n}\nremove(i)\n\n### Compare Time Series of legalized States\nColorado <- t(subset(PriceTimeSeries, PriceTimeSeries$State==\"Colorado\", select=2:34))\nColorado <- as.vector(Colorado)\n\nWashington <- t(subset(PriceTimeSeries, PriceTimeSeries$State==\"Washington\", select=2:34))\nWashington <- as.vector(Washington)\n\nCalifornia <- t(subset(PriceTimeSeries, PriceTimeSeries$State==\"California\", select=2:34))\nCalifornia <- as.vector(California)\n\n### TimE Series Graphs\nMonths <- sort(as.character(unique(DB$Month)))\nG1 <- data.frame(Month=rep(Months, 4), State=c(rep(\"National\", 33), rep(\"Colorado\", 33),\n                                                rep(\"Washington\", 33), rep(\"California\", 33)), PriceIndex=c(Index, Colorado, Washington, California))\n\n## Smooth Curve\nHPFilter <- c(unlist(hpfilter(G1$PriceIndex[1:33],freq=1)[2]), ## Include adjusted series using Hodrick-Prescott Filer\n              unlist(hpfilter(G1$PriceIndex[34:66],freq=1)[2]),\n              unlist(hpfilter(G1$PriceIndex[67:99],freq=1)[2]),\n              unlist(hpfilter(G1$PriceIndex[100:132],freq=1)[2]))\nG1$Adjusted <- HPFilter\nremove(HPFilter)\n\nggplot(data=G1, aes(x=Month, y=Adjusted, group=State, color=State )) +\n  geom_line() + ylim(0,400) + geom_point()\n",
    "created" : 1371172185828.000,
    "dirty" : true,
    "encoding" : "",
    "folds" : "",
    "hash" : "3829042391",
    "id" : "6D53C6B0",
    "lastKnownWriteTime" : 4049073818858517365,
    "path" : null,
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}