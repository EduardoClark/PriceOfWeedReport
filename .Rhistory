DB$State <- substr(DB$State, 2, 1000) ##Trim leading Zero
tmp1 <- subset(DB, DB$State==State)
tmp1 <- subset(DB, DB$State == State)
StatesList <- as.character(unique(DB$State)) #Create a State List
StatesList[1]
StatesList <- sort(StatesList)
StatesList
Location <- StatesList[5]
tmp1 <- subset(DB, DB$State == Location)
tmp <- Location
tmp1 <- subset(DB, DB$State == tmp)
remove(State, Location)
StateAverage <- function(Location){
tmp <- Location
tmp1 <- subset(DB, DB$State == tmp)
tmp2 <- subset(tmp1, tmp1$Quality=="high quality")
tmp3 <- subset(tmp1, tmp1$Quality=="medium quality")
tmp4 <- subset(tmp1, tmp1$Quality=="low quality")
tmp2 <- mean(tmp2$OuncePrice)
tmp3 <- mean(tmp3$OuncePrice)
tmp4 <- mean(tmp4$OuncePrice)
tmp5 <- data.frame(State=Location, HQ=tmp2, MQ=tmp3,LQ=tmp4)
return(tmp5)
}
remove(tmp1)
remove(tmp)
prueba <- StateAverage("California")
View(prueba)
remove(prueba)
StateAverages <- ldply(lapply(StatesList, StateAverage))
View(StateAverages)
StateAverages$State
as.character(StateAverages$State)
plot(density(StateAverages$HQ))
plot(density(StateAverages$LQ))
plot(density(StateAverages$MQ))
density(StateAverages$HQ)
plot(density(StateAverages$HQ))
plot(density(StateAverages$MQ))
plot(density(StateAverages$LQ))
View(StateAverages)
mean(StateAverages$HQ)
mean(StateAverages$MQ)
mean(StateAverages$LQ)
DB <- arrange(DB, DB$OuncePrice)
View(DB)
remove(list=ls())
source("src/LoadLibraries.R", echo=FALSE, verbose=FALSE) ##Load Libraries
source("src/Preprocess.R", echo=FALSE, verbose=FALSE) ## Preprocess and Include Equivalencies
28/1000
DB <- subset(DB, DB$OuncePrice < 1000 & DB$OuncePrice > 50)
StatesList <- as.character(unique(DB$State)) #Create a State List
StatesList <- sort(StatesList)
###State Average Function
StateAverage <- function(Location){
tmp <- Location
tmp1 <- subset(DB, DB$State == tmp)
tmp2 <- subset(tmp1, tmp1$Quality=="high quality")
tmp3 <- subset(tmp1, tmp1$Quality=="medium quality")
tmp4 <- subset(tmp1, tmp1$Quality=="low quality")
tmp2 <- mean(tmp2$OuncePrice)
tmp3 <- mean(tmp3$OuncePrice)
tmp4 <- mean(tmp4$OuncePrice)
tmp5 <- data.frame(State=Location, HQ=tmp2, MQ=tmp3,LQ=tmp4)
return(tmp5)
}
### Apply State Average Function to all states
StateAverages <- ldply(lapply(StatesList, StateAverage))
View(StateAverages)
plot(density(StateAverages$HQ))
plot(density(StateAverages$MQ))
plot(density(StateAverages$LQ))
dens1 <- data.frame(Price=c(StateAverages$HQ, StateAverages$MQ, StateAverages$LQ),
Quality=c(rep("HQ", 50), rep("MQ", 50), rep("LQ", 50)))
View(dens1)
ggplot(dens1, aes(x = Price, fill = Quality)) + geom_density(alpha = 0.5) +
ylab("Densidad") + xlab("Average Price")
ggplot(dens1, aes(x = Price, fill = Quality)) + geom_density(alpha = 0.5) +
ylab("Densidad") + xlab("Average Price") + xlim(0,500)
library("Cairo", lib.loc="/home/eclark/R/x86_64-pc-linux-gnu-library/2.15")
Cairo(600, 600, file="plots/StateAverageDensity.png", type="png", bg="white")
ggplot(dens1, aes(x = Price, fill = Quality)) + geom_density(alpha = 0.5) +
ylab("Densidad") + xlab("Average Price") + xlim(0,500)
dev.off()
remove(StateAverage, StatesList, dens1)
View(StateAverages)
StateAverages$HQ_LQ <- StateAverages$HQ / StateAverages$LQ
View(StateAverages)
meand(StateAverages$HQ_LQ)
mean(StateAverages$HQ_LQ)
StateAverages$HQ_MQ <- StateAverages$HQ / StateAverages$MQ #  High Quality to Mid Quality price difference
mean(StateAverages$HQ_MQ)
QualityAdjustment <- data.frame(State=StateAverages$State, HQLQ=StateAverages$HQ_LQ,
HQMQ=StateAverages$HQ_MQ) ##DF with only conversion
View(QualityAdjustment)
DB <- merge(DB, QualityAdjustment, by="State", all=TRUE)
View(DB)
DB$AdjustedOuncePrice <- ifelse(DB$Quality=="low quality", DB$OuncePrice * DB$HQLQ, DB$OuncePrice)
View(DB)
DB$AdjustedOuncePrice <- ifelse(DB$Quality=="medium quality", DB$OuncePrice * DB$HQMQ, DB$AdjustedOuncePrice)
View(DB)
566.999 * 923
566.99 * 1.628999
StatesList <- as.character(unique(DB$State)) #Create a State List
StatesList <- sort(StatesList)
StateAverage <- function(Location){
tmp <- Location
tmp1 <- subset(DB, DB$State == tmp)
tmp2 <- subset(tmp1, tmp1$Quality=="high quality")
tmp2 <- mean(tmp2$AdjustedOuncePrice)
tmp5 <- data.frame(State=Location, PriceAverage=tmp2)
return(tmp2)
}
AdjustedStateAverages <- ldply(lapply(StatesList, StateAverage))
View(AdjustedStateAverages)
View(AdjustedStateAverages)
plot(density(AdjustedStateAverages$V1))
StateAverage <- function(Location){
tmp <- Location
tmp1 <- subset(DB, DB$State == tmp)
tmp2 <- mean(tmp2$AdjustedOuncePrice)
tmp5 <- data.frame(State=tmp, PriceAverage=tmp2)
return(tmp2)
}
### Apply State Average Function to all states
AdjustedStateAverages <- ldply(lapply(StatesList, StateAverage))
StateAverage <- function(Location){
tmp <- Location
tmp1 <- subset(DB, DB$State == tmp)
tmp2 <- mean(tmp1$AdjustedOuncePrice)
tmp5 <- data.frame(State=tmp, PriceAverage=tmp2)
return(tmp2)
}
### Apply State Average Function to all states
AdjustedStateAverages <- ldply(lapply(StatesList, StateAverage))
View(AdjustedStateAverages)
StateAverage <- function(Location){
tmp <- Location
tmp1 <- subset(DB, DB$State == tmp)
tmp2 <- mean(tmp1$AdjustedOuncePrice)
tmp5 <- data.frame(State=tmp, PriceAverage=tmp2)
return(tmp5)
}
### Apply State Average Function to all states
AdjustedStateAverages <- ldply(lapply(StatesList, StateAverage))
View(AdjustedStateAverages)
arrange(AdjustedStateAverages$PriceAverage)
arrange(AdjustedStateAverages,AdjustedStateAverages$PriceAverage)
View(QualityAdjustment)
write.csv(QualityAdjustment, file="data-out//StateQualityAdjustment.csv")
write.csv(QualityAdjustment, file="data-out//StateQualityAdjustment.csv", row.names=FALSE)
remove(QualityAdjustment, StateAverage)
View(StateAverages)
View(AdjustedStateAverages)
remove(QualityAdjustment, StateAverage, StateAverages)
View(AdjustedStateAverages)
Quantities <- unique(DB$Quantity)
Quantities <- as.character(unique(DB$Quantity))
Quantities[1]
collpase("an_ounce")
collapse("an ounce")
?collapse
??collapse
StateAverageQuantities <- function(State){
tmp <- State
tmp1 <- subset(DB, DB$State== tmp)
tmp2 <- Quantities[1]
tmp3 <- subset(tmp1, DB$Quantity == tmp2)
tmp4 <- mean(tmp3$AdjustedOuncePrice)
tmp5 <- gsub(" ", "_", tmp2)
tmp6 <- data.frame(State=tmp, tmp5=tmp4)
}
ldply(lapply(StatesList, StateAverageQuantities))
StateAverageQuantities <- function(State){
tmp <- State
tmp1 <- subset(DB, DB$State== tmp)
tmp2 <- Quantities[1]
tmp3 <- subset(tmp1, DB$Quantity == tmp2)
tmp4 <- mean(tmp3$AdjustedOuncePrice, na.rm=TRUE)
tmp5 <- gsub(" ", "_", tmp2)
tmp6 <- data.frame(State=tmp, tmp5=tmp4)
}
ldply(lapply(StatesList, StateAverageQuantities))
require(Zelig)
View(AdjustedStateAverages)
View(DB)
View(DB)
z.out <- zelig(OuncePrice ~ Equivalent + as.factor(State) + as.factor(Quality),
model = "ls", data = DB)
z.out
summary(z.out)
plot(z.out)
s.out <- sim(z.out, x = California, x1 = Texas)
s.out <- sim(z.out, x = x.California, x1 = x.Texas)
s.out <- sim(z.out, x = Equivalent, x1 = as.factor(State))
View(AdjustedStateAverages)
DB$GramsXTransaction <- (1 / DB$Equivalent) / 28.3495231
View(DB)
DB$GramsXTransaction <- ( DB$Equivalent) / 28.3495231
View(AdjustedStateAverages)
View(DB)
28/8
DB$GramsXTransaction <-  28.3495231 / DB$Equivalent
View(DB)
z.out <- zelig(OuncePrice ~ GramsXTransaction + as.factor(State) + as.factor(Quality),
model = "ls", data = DB)
summary(z.out)
summary(z.out)
DB$FinalAdjustedOuncePrice <- DB$AdjustedOuncePrice - (5.5313 * DB$GramsXTransaction)
View(AdjustedStateAverages)
remove(Quantities, AdjustedStateAverages)
StateAverageQuantities <- function(State){
tmp <- State
tmp1 <- subset(DB, DB$State== tmp)
tmp4 <- mean(FinalAdjustedOuncePrice, na.rm=TRUE)
tmp6 <- data.frame(State=tmp, tmp5=tmp4)
}
StateAverages <- ldply(lapply(StatesList, StateAverageQuantities))
StateAverageQuantities <- function(State){
tmp <- State
tmp1 <- subset(DB, DB$State== tmp)
tmp4 <- mean(tmp1$FinalAdjustedOuncePrice, na.rm=TRUE)
tmp6 <- data.frame(State=tmp, tmp5=tmp4)
}
StateAverages <- ldply(lapply(StatesList, StateAverageQuantities))
View(StateAverages)
StateAverageQuantities <- function(State){
tmp <- State
tmp1 <- subset(DB, DB$State== tmp)
tmp4 <- mean(tmp1$FinalAdjustedOuncePrice, na.rm=TRUE)
tmp6 <- data.frame(State=tmp, PriceAverage=tmp4)
}
StateAverages <- ldply(lapply(StatesList, StateAverageQuantities))
View(StateAverages)
arrange(StateAverages, StateAverages$PriceAverage)
plot(density(StateAverages$PriceAverage))
remove(StateAverageQuantities, z.out)
Months <- unique(DB$Month) ##Get Month List
Months <- as.character(unique(DB$Month)) ##Get Month List
tmp <- Months[33]
Ounces <- subset(tmp, tmp$Month==Mes)
tmp <- DB
Ounces <- subset(tmp, tmp$Month == Mes)
Ounces <- subset(tmp, tmp$Month == tmp)
t <- Months[1]
t <- Months[33]
Ounces <- subset(tmp, tmp$Month == t)
View(Ounces)
Months
t <- Months[13]
t <- Mes
tmp <- DB
tmp <- DB
Ounces <- subset(tmp, tmp$Month == t)
View(Ounces)
StateAverage <- ldply(tapply(Ounces$FinalAdjustedOuncePrice, Ounces$State, mean))
View(StateAverage)
Ns <- ldply(table(Ounces$State))
colnames(Ns) <- c("State", "Ns")
colnames(StateAverage) <- c("State", "Price_Average")
StateAverage <- merge(StateAverage, StatesList, by="State", all=TRUE)
StatesList <- data.frame(State=unique(DB$State))
StateAverage <- merge(StateAverage, StatesList, by="State", all=TRUE)
StateAverage <- merge(StateAverage, Ns, by="State", all=TRUE)
View(StateAverage)
colnames(StateAverage) <- c("State", paste("Promedio_", Mes, sep=""))
colnames(StateAverage) <- c("State", paste("Promedio_", t, sep=""))
colnames(StateAverage) <- c("State", paste("Promedio_", Month, sep=""))
View(StateAverage)
colnames(StateAverage) <- c("State", paste("Promedio_", t, sep=""))
View(StateAverage)
plot(density(StateAverage$Promedio_2013-03))
remove(Ns, Ounces, StateAverage, tmp, t)
TimeSeries <- lapply(Months, Averages)
Averages <- function(Month){ ## Function to get monthly price average
t <- Month
tmp <- DB
Ounces <- subset(tmp, tmp$Month == t)
StateAverage <- ldply(tapply(Ounces$FinalAdjustedOuncePrice, Ounces$State, mean))
Ns <- ldply(table(Ounces$State))
colnames(Ns) <- c("State", "Ns")
colnames(StateAverage) <- c("State", "Price_Average")
StateAverage <- merge(StateAverage, StatesList, by="State", all=TRUE)
StateAverage <- merge(StateAverage, Ns, by="State", all=TRUE)
colnames(StateAverage) <- c("State", paste("Promedio_", Month, sep=""))
return(StateAverage)
}
TimeSeries <- lapply(Months, Averages)
PriceTimeSeries <- ldply(prueba[1])
PriceTimeSeries <- ldply(TimeSeries[1])
View(PriceTimeSeries)
for (i in 2:33){
tmp <- ldply(TimeSeries[i])
PriceTimeSeries <- merge(prueba1, tmp, by=1, all=TRUE)
remove(tmp)
}
PriceTimeSeries <- ldply(TimeSeries[1])
for (i in 2:33){
tmp <- ldply(TimeSeries[i])
PriceTimeSeries <- merge(PriceTimeSeries, tmp, by=1, all=TRUE)
remove(tmp)
}
warnings()
View(PriceTimeSeries)
Averages <- function(Month){ ## Function to get monthly price average
t <- Month
tmp <- DB
Ounces <- subset(tmp, tmp$Month == t)
StateAverage <- ldply(tapply(Ounces$FinalAdjustedOuncePrice, Ounces$State, mean))
colnames(StateAverage) <- c("State", "Price_Average")
StateAverage <- merge(StateAverage, StatesList, by="State", all=TRUE)
colnames(StateAverage) <- c("State", paste("Promedio_", Month, sep=""))
return(StateAverage)
}
TimeSeries <- lapply(Months, Averages)
PriceTimeSeries <- ldply(TimeSeries[1])
View(PriceTimeSeries)
Averages <- function(Month){ ## Function to get monthly price average
t <- Month
tmp <- DB
Ounces <- subset(tmp, tmp$Month == t)
StateAverage <- ldply(tapply(Ounces$FinalAdjustedOuncePrice, Ounces$State, mean))
colnames(StateAverage) <- c("State", "Price_Average")
StateAverage <- merge(StateAverage, StatesList, by="State", all=TRUE)
colnames(StateAverage) <- c("State", paste("AveragePrice_", Month, sep=""))
return(StateAverage)
}
###Get Monthly Averages
TimeSeries <- lapply(Months, Averages)
PriceTimeSeries <- ldply(TimeSeries[1])
for (i in 2:33){
tmp <- ldply(TimeSeries[i])
PriceTimeSeries <- merge(PriceTimeSeries, tmp, by=1, all=TRUE)
remove(tmp)
}
View(PriceTimeSeries)
Months <- sort(Months)
Months
Averages <- function(Month){ ## Function to get monthly price average
t <- Month
tmp <- DB
Ounces <- subset(tmp, tmp$Month == t)
StateAverage <- ldply(tapply(Ounces$FinalAdjustedOuncePrice, Ounces$State, mean))
colnames(StateAverage) <- c("State", "Price_Average")
StateAverage <- merge(StateAverage, StatesList, by="State", all=TRUE)
colnames(StateAverage) <- c("State", paste("AveragePrice_", Month, sep=""))
return(StateAverage)
}
###Get Monthly Averages
TimeSeries <- lapply(Months, Averages)
PriceTimeSeries <- ldply(TimeSeries[1])
for (i in 2:33){
tmp <- ldply(TimeSeries[i])
PriceTimeSeries <- merge(PriceTimeSeries, tmp, by=1, all=TRUE)
remove(tmp)
}
View(PriceTimeSeries)
write.csv(PriceTimeSeries, file="PriceTimeSeries.csv", row.names=FALSE)
View(StateAverages)
write.csv(PriceTimeSeries, file="data-out/PriceTimeSeries.csv", row.names=FALSE)
write.csv(StateAverages, file="data-out/StatePrices.csv", row.names=FALSE)
remove(Months, TimeSeries, i, Averages)
MJIncidence <- read.csv("http://www.samhsa.gov/data/NSDUH/2k11State/NSDUHsaeExcelTab2-2011.csv", header=TRUE) ### Read NSDUH State Prevalence Estimates
MJIncidence$Table.2..Marijuana.Use.in.the.Past.Year..by.Age.Group.and.State..Percentages..Annual.Averages.Based.on.2010.and.2011.NSDUHs.. <- NULL
MJIncidence <- subset(MJIncidence, MJIncidence$X != (unique(MJIncidence$X)[1]))
MJIncidence <- subset(MJIncidence, select=1:2)
colnames(MJIncidence) <- c("State", "UserPer")
MJIncidence$State <- as.character(MJIncidence$State)
View(MJIncidence)
StatePopulation <- ldply(readHTMLTable("http://en.wikipedia.org/wiki/List_of_U.S._states_and_territories_by_population")[5])
StatePopulation <- subset(StatePopulation, select=c(4,5,13))
colnames(StatePopulation) <- c("State", "Population", "PercentagePopulation")
StatePopulation$Population <- gsub(",", "", StatePopulation$Population)
StatePopulation$Population <- as.numeric(StatePopulation$Population)
StatePopulation$State <- as.character(StatePopulation$State)
StatePopulation$State <- substring(StatePopulation$State, 2, 1000)
View(StatePopulation)
StatePopulation <- merge(MJIncidence, StatePopulation, by="State", all.x=TRUE, all.y=FALSE)
StatePopulation <- subset(StatePopulation, is.na(StatePopulation$Population )==FALSE)
StatePopulation$UserPer <- gsub("%", "", StatePopulation$UserPer)
StatePopulation$PercentagePopulation <- gsub("%", "", StatePopulation$PercentagePopulation)
StatePopulation$UserPer <- as.numeric(StatePopulation$UserPer)
StatePopulation$PercentagePopulation <- as.numeric(StatePopulation$PercentagePopulation)
StatePopulation$Weight <- StatePopulation$UserPer * StatePopulation$PercentagePopulation
StatePopulation$Weight <- StatePopulation$Weight / sum(StatePopulation$Weight)
View(StatePopulation)
remove(MJIncidence)
StateAverages$State
as.character(StateAverages$State)
StateAverage$State <- substring(StateAverage$State, 2)
StateAverages$State <- substring(StateAverages$State, 2)
as.character(StateAverages$State)
StateAverage <- merge(StateAverage, StatePopulation, by="State", all.x=TRUE, all.y=FALSE)
StateAverages <- merge(StateAverages, StatePopulation, by="State", all.x=TRUE, all.y=FALSE)
View(StateAverages)
View(StateAverages)
MJIncidence <- read.csv("http://www.samhsa.gov/data/NSDUH/2k11State/NSDUHsaeExcelTab2-2011.csv", header=TRUE) ### Read NSDUH State Prevalence Estimates
MJIncidence$Table.2..Marijuana.Use.in.the.Past.Year..by.Age.Group.and.State..Percentages..Annual.Averages.Based.on.2010.and.2011.NSDUHs.. <- NULL
MJIncidence <- subset(MJIncidence, MJIncidence$X != (unique(MJIncidence$X)[1]))
MJIncidence <- subset(MJIncidence, select=1:2)
colnames(MJIncidence) <- c("State", "UserPer")
MJIncidence$State <- as.character(MJIncidence$State)
#State Population (From wikipedia)
StatePopulation <- ldply(readHTMLTable("http://en.wikipedia.org/wiki/List_of_U.S._states_and_territories_by_population")[5])
StatePopulation <- subset(StatePopulation, select=c(4,5,13))
colnames(StatePopulation) <- c("State", "Population", "PercentagePopulation")
StatePopulation$Population <- gsub(",", "", StatePopulation$Population)
StatePopulation$Population <- as.numeric(StatePopulation$Population)
StatePopulation$State <- as.character(StatePopulation$State)
StatePopulation$State <- substring(StatePopulation$State, 2, 1000)
StatePopulation <- merge(MJIncidence, StatePopulation, by="State", all.x=TRUE, all.y=FALSE)
StatePopulation <- subset(StatePopulation, is.na(StatePopulation$Population )==FALSE)
StatePopulation$UserPer <- gsub("%", "", StatePopulation$UserPer)
StatePopulation$PercentagePopulation <- gsub("%", "", StatePopulation$PercentagePopulation)
StatePopulation$UserPer <- as.numeric(StatePopulation$UserPer)
StatePopulation$PercentagePopulation <- as.numeric(StatePopulation$PercentagePopulation)
StatePopulation$Weight <- StatePopulation$UserPer * StatePopulation$PercentagePopulation
StatePopulation$Weight <- StatePopulation$Weight / sum(StatePopulation$Weight)
remove(MJIncidence)
as.character(PriceTimeSeries$State)
PriceTimeSeries$State <- substring(PriceTimeSeries$State, 2) ##Trim Leading Zero
PriceTimeSeries <- merge(PriceTimeSeries, StatePopulation, by="State", all.x=TRUE, all.y=FALSE)
View(PriceTimeSeries)
Index <- weighted.mean(unlist(PriceTimeSeries[2]), PriceTimeSeriesWeight, na.rm=TRUE)
Index <- weighted.mean(unlist(PriceTimeSeries[2]), PriceTimeSeries$Weight, na.rm=TRUE)
for (i in 3:34){
tmp <- weighted.mean(unlist(PriceTimeSeries[i]), PriceTimeSeries$Weight, na.rm=TRUE)
Index <- c(Index, tmp)
remove(tmp)
}
Indez
Index
remove(StatePopulation)
remove(i)
View(PriceTimeSeries)
Colorado <- t(subset(PriceTimeSeries, PriceTimeSeries$State=="Colorado", select=2:34))
Colorado <- as.vector(Colorado)
Washington <- t(subset(PriceTimeSeries, PriceTimeSeries$State=="Washington", select=2:34))
Washington <- as.vector(Washington)
California <- t(subset(PriceTimeSeries, PriceTimeSeries$State=="California", select=2:34))
California <- as.vector(California)
Colorado
G1 <- data.frame(Mes=rep(meses, 4), Estado=c(rep("Nacional", 33), rep("Colorado", 33),
rep("Washington", 33), rep("California", 33)), Precio=c(Index, Colorado, Washington, California))
Months <- sort(as.character(unique(DB$Month)))
G1 <- data.frame(Month=rep(Months, 4), State=c(rep("Nacional", 33), rep("Colorado", 33),
rep("Washington", 33), rep("California", 33)), PriceIndex=c(Index, Colorado, Washington, California))
View(`G1`)
G1 <- data.frame(Month=rep(Months, 4), State=c(rep("National", 33), rep("Colorado", 33),
rep("Washington", 33), rep("California", 33)), PriceIndex=c(Index, Colorado, Washington, California))
HPFilter <- c(unlist(hpfilter(G1$PriceIndex[1:33],freq=1)[2]), ## Include adjusted series using Hodrick-Prescott Filer
unlist(hpfilter(G1$PriceIndex[34:66],freq=1)[2]),
unlist(hpfilter(G1$PriceIndex[67:99],freq=1)[2]),
unlist(hpfilter(G1$PriceIndex[100:132],freq=1)[2]))
??hpfilter
require(mFilter)
HPFilter <- c(unlist(hpfilter(G1$PriceIndex[1:33],freq=1)[2]), ## Include adjusted series using Hodrick-Prescott Filer
unlist(hpfilter(G1$PriceIndex[34:66],freq=1)[2]),
unlist(hpfilter(G1$PriceIndex[67:99],freq=1)[2]),
unlist(hpfilter(G1$PriceIndex[100:132],freq=1)[2]))
G1$Adjusted <- HPFilter
remove(HPFilter)
ggplot(data=Index, aes(x=Mes, y=Adjusted, group=Estado, color=Estado )) +
geom_line() + ylim(100,400) + geom_point()
ggplot(data=Index, aes(x=Month, y=Adjusted, group=State, color=State )) +
geom_line() + ylim(100,400) + geom_point()
ggplot(data=G1, aes(x=Month, y=Adjusted, group=State, color=State )) +
geom_line() + ylim(100,400) + geom_point()
ggplot(data=G1, aes(x=Month, y=Adjusted, group=State, color=State )) +
geom_line() + ylim(0,400) + geom_point()
ggplot(data=G1, aes(x=Month, y=PriceIndex, group=State, color=State )) +
geom_line() + ylim(0,400) + geom_point()
ggplot(data=G1, aes(x=Month, y=PriceIndex, group=State, color=State )) +
geom_line() + ylim(0,400) + geom_point()
HPFilter <- c(unlist(hpfilter(G1$PriceIndex[1:33],freq=2)[2]), ## Include adjusted series using Hodrick-Prescott Filer
unlist(hpfilter(G1$PriceIndex[34:66],freq=2)[2]),
unlist(hpfilter(G1$PriceIndex[67:99],freq=2)[2]),
unlist(hpfilter(G1$PriceIndex[100:132],freq=2)[2]))
G1$Adjusted <- HPFilter
remove(HPFilter)
ggplot(data=G1, aes(x=Month, y=PriceIndex, group=State, color=State )) +
geom_line() + ylim(0,400) + geom_point()
ggplot(data=G1, aes(x=Month, y=Adjusted, group=State, color=State )) +
geom_line() + ylim(0,400) + geom_point()
HPFilter <- c(unlist(hpfilter(G1$PriceIndex[1:33],freq=.5)[2]), ## Include adjusted series using Hodrick-Prescott Filer
unlist(hpfilter(G1$PriceIndex[34:66],freq=.5)[2]),
unlist(hpfilter(G1$PriceIndex[67:99],freq=.5)[2]),
unlist(hpfilter(G1$PriceIndex[100:132],freq=.5)[2]))
G1$Adjusted <- HPFilter
remove(HPFilter)
ggplot(data=G1, aes(x=Month, y=Adjusted, group=State, color=State )) +
geom_line() + ylim(0,400) + geom_point()
HPFilter <- c(unlist(hpfilter(G1$PriceIndex[1:33],freq=1)[2]), ## Include adjusted series using Hodrick-Prescott Filer
unlist(hpfilter(G1$PriceIndex[34:66],freq=1)[2]),
unlist(hpfilter(G1$PriceIndex[67:99],freq=1)[2]),
unlist(hpfilter(G1$PriceIndex[100:132],freq=1)[2]))
G1$Adjusted <- HPFilter
remove(HPFilter)
ggplot(data=G1, aes(x=Month, y=Adjusted, group=State, color=State )) +
geom_line() + ylim(0,400) + geom_point()
Index
260 / 28.35
9.171076 * 1000
California
Cairo(600, 600, file="plots/PriceIndexTimeSeries.png", type="png", bg="white")
ggplot(data=G1, aes(x=Month, y=Adjusted, group=State, color=State )) +
geom_line() + ylim(0,400) + geom_point()
dev.off()
Cairo(1200, 1000, file="plots/PriceIndexTimeSeries.png", type="png", bg="white")
ggplot(data=G1, aes(x=Month, y=Adjusted, group=State, color=State )) +
geom_line() + ylim(0,400) + geom_point()
dev.off()
